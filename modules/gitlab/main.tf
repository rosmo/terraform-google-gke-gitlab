/**
 * Copyright 2018-2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

locals {
  gitlab_db_name = var.gitlab_db_random_prefix ? "${var.gitlab_db_name}-${random_id.suffix[0].hex}" : var.gitlab_db_name
}

resource "random_id" "suffix" {
  count = var.gitlab_db_random_prefix ? 1 : 0

  byte_length = 4
}

// Network data sources
data "google_compute_network" "gitlab" {
  name = var.network
}

data "google_compute_subnetwork" "subnetwork" {
  name   = var.subnetwork
  region = var.region
}

// GCS Service Account
resource "google_service_account" "gitlab_gcs" {
  project      = var.project_id
  account_id   = "gitlab-gcs"
  display_name = "GitLab Cloud Storage"
}

resource "google_service_account_key" "gitlab_gcs" {
  service_account_id = google_service_account.gitlab_gcs.name
}

resource "google_project_iam_member" "project" {
  project = var.project_id
  role    = "roles/storage.admin"
  member  = "serviceAccount:${google_service_account.gitlab_gcs.email}"
}

// Gitlab IP addresses
resource "google_compute_address" "gitlab" {
  name         = "gitlab"
  region       = var.region
  address_type = "EXTERNAL"
  description  = "Gitlab Ingress IP"
  count        = var.gitlab_address_name == "" && !var.use_gclb ? 1 : 0
}

resource "google_compute_global_address" "gitlab_global" {
  count = var.use_gclb ? 1 : 0

  name         = "gitlab"
  address_type = "EXTERNAL"
}

// Database
resource "google_compute_global_address" "gitlab_sql" {
  project       = var.project_id
  name          = "gitlab-sql"
  purpose       = "VPC_PEERING"
  address_type  = "INTERNAL"
  network       = data.google_compute_network.gitlab.self_link
  prefix_length = 16
}

resource "google_service_networking_connection" "private_vpc_connection" {
  network                 = data.google_compute_network.gitlab.self_link
  service                 = "servicenetworking.googleapis.com"
  reserved_peering_ranges = [google_compute_global_address.gitlab_sql.name]
}

// Cloud SQL database
resource "google_sql_database_instance" "gitlab_db" {
  depends_on       = [google_service_networking_connection.private_vpc_connection]
  name             = local.gitlab_db_name
  region           = var.region
  database_version = "POSTGRES_13"

  deletion_protection = !var.allow_force_destroy

  settings {
    tier            = "db-custom-4-15360"
    disk_autoresize = true

    ip_configuration {
      ipv4_enabled    = "false"
      private_network = data.google_compute_network.gitlab.self_link
    }
  }
}

resource "google_sql_database" "gitlabhq_production" {
  name     = "gitlabhq_production"
  instance = google_sql_database_instance.gitlab_db.name
}

resource "random_string" "autogenerated_gitlab_db_password" {
  length  = 16
  special = false
}

resource "google_sql_user" "gitlab" {
  name     = "gitlab"
  instance = google_sql_database_instance.gitlab_db.name

  password = var.gitlab_db_password != "" ? var.gitlab_db_password : random_string.autogenerated_gitlab_db_password.result
}

// Redis
resource "google_redis_instance" "gitlab" {
  name               = "gitlab"
  tier               = "STANDARD_HA"
  memory_size_gb     = 5
  region             = var.region
  authorized_network = data.google_compute_network.gitlab.self_link

  display_name = "GitLab Redis"
}

// Cloud Storage
resource "google_storage_bucket" "gitlab-backups" {
  name                        = "${var.project_id}-gitlab-backups"
  location                    = var.region
  uniform_bucket_level_access = var.gcs_uniform_access

  force_destroy = var.allow_force_destroy
}

resource "google_storage_bucket" "gitlab-uploads" {
  name                        = "${var.project_id}-gitlab-uploads"
  location                    = var.region
  uniform_bucket_level_access = var.gcs_uniform_access

  force_destroy = var.allow_force_destroy
}

resource "google_storage_bucket" "gitlab-artifacts" {
  name                        = "${var.project_id}-gitlab-artifacts"
  location                    = var.region
  uniform_bucket_level_access = var.gcs_uniform_access

  force_destroy = var.allow_force_destroy
}

resource "google_storage_bucket" "git-lfs" {
  name                        = "${var.project_id}-git-lfs"
  location                    = var.region
  uniform_bucket_level_access = var.gcs_uniform_access

  force_destroy = var.allow_force_destroy
}

resource "google_storage_bucket" "gitlab-packages" {
  name                        = "${var.project_id}-gitlab-packages"
  location                    = var.region
  uniform_bucket_level_access = var.gcs_uniform_access

  force_destroy = var.allow_force_destroy
}

resource "google_storage_bucket" "gitlab-registry" {
  name                        = "${var.project_id}-registry"
  location                    = var.region
  uniform_bucket_level_access = var.gcs_uniform_access

  force_destroy = var.allow_force_destroy
}

resource "google_storage_bucket" "gitlab-pseudo" {
  name                        = "${var.project_id}-pseudo"
  location                    = var.region
  uniform_bucket_level_access = var.gcs_uniform_access

  force_destroy = var.allow_force_destroy
}

resource "google_storage_bucket" "gitlab-runner-cache" {
  name                        = "${var.project_id}-runner-cache"
  location                    = var.region
  uniform_bucket_level_access = var.gcs_uniform_access

  force_destroy = var.allow_force_destroy
}

resource "kubernetes_storage_class" "pd-ssd" {
  metadata {
    name        = "pd-ssd"
    labels      = {}
    annotations = {}
  }

  storage_provisioner = "kubernetes.io/gce-pd"

  parameters = {
    type = "pd-ssd"
  }
}

resource "kubernetes_secret" "gitlab_pg" {
  metadata {
    name        = "gitlab-pg"
    labels      = {}
    annotations = {}
  }

  data = {
    password = var.gitlab_db_password != "" ? var.gitlab_db_password : random_string.autogenerated_gitlab_db_password.result
  }
}

resource "kubernetes_secret" "gitlab_rails_storage" {
  metadata {
    name        = "gitlab-rails-storage"
    labels      = {}
    annotations = {}
  }

  data = {
    connection = <<EOT
provider: Google
google_project: ${var.project_id}
google_client_email: ${google_service_account.gitlab_gcs.email}
google_json_key_string: '${base64decode(google_service_account_key.gitlab_gcs.private_key)}'
EOT
  }
}

resource "kubernetes_secret" "gitlab_registry_storage" {
  metadata {
    name = "gitlab-registry-storage"
  }

  data = {
    "gcs.json" = <<EOT
${base64decode(google_service_account_key.gitlab_gcs.private_key)}
EOT
    storage    = <<EOT
gcs:
  bucket: ${var.project_id}-registry
  keyfile: /etc/docker/registry/storage/gcs.json
EOT
  }
}

resource "kubernetes_secret" "gitlab_gcs_credentials" {
  metadata {
    name = "google-application-credentials"
  }

  data = {
    gcs-application-credentials-file = base64decode(google_service_account_key.gitlab_gcs.private_key)
  }
}

data "google_compute_address" "gitlab" {
  name   = var.gitlab_address_name
  region = var.region

  # Do not get data if the address is being created as part of the run
  count = var.gitlab_address_name == "" || var.use_gclb ? 0 : 1
}

module "gclb" {
  count = var.use_gclb ? 1 : 0

  source = "../gclb"

  project_id = var.project_id
  region     = var.region
  network    = data.google_compute_network.gitlab.self_link
  subnetwork = data.google_compute_subnetwork.subnetwork.name

  gitlab_proxy_only_subnet_cidr = var.gitlab_proxy_only_subnet_cidr

  gclb_logging   = var.gclb_logging
  gitlab_address = google_compute_global_address.gitlab_global[0].address

  domain = local.domain
}

locals {
  gitlab_address = var.use_gclb ? google_compute_global_address.gitlab_global[0].address : (var.gitlab_address_name == "" ? google_compute_address.gitlab.0.address : data.google_compute_address.gitlab.0.address)
  domain         = var.domain != "" ? var.domain : "${local.gitlab_address}.nip.io"
}

data "template_file" "helm_values" {
  template = file(var.gitlab_values_template)

  vars = {
    DOMAIN                     = local.domain
    INGRESS_IP                 = local.gitlab_address
    DB_PRIVATE_IP              = google_sql_database_instance.gitlab_db.private_ip_address
    REDIS_PRIVATE_IP           = google_redis_instance.gitlab.host
    PROJECT_ID                 = var.project_id
    GITLAB_RUNNER_INSTALL      = var.gitlab_runner_install
    USE_GCLB                   = var.use_gclb
    SSH_HOST                   = var.use_gclb ? format("gitlab.%s", local.domain) : local.domain
    BACKEND                    = var.use_gclb ? module.gclb[0].webservice_backend : ""
    WORKHORSE_BACKEND          = var.use_gclb ? module.gclb[0].workhorse_backend : ""
    REGISTRY_BACKEND           = var.use_gclb ? module.gclb[0].registry_backend : ""
    SHELL_BACKEND              = var.use_gclb ? module.gclb[0].shell_backend : ""
    BACKEND_INTERNAL           = var.use_gclb ? module.gclb[0].webservice_backend_internal : ""
    WORKHORSE_BACKEND_INTERNAL = var.use_gclb ? module.gclb[0].workhorse_backend_internal : ""
    INTERNAL_IP                = var.use_gclb ? module.gclb[0].internal_ip : ""
    REGION                     = var.region
  }
}

resource "helm_release" "gitlab" {
  name       = "gitlab"
  repository = "https://charts.gitlab.io"
  chart      = "gitlab"
  version    = var.helm_chart_version
  timeout    = 1600

  values = [data.template_file.helm_values.rendered]

  depends_on = [
    google_redis_instance.gitlab,
    google_sql_user.gitlab,
    kubernetes_storage_class.pd-ssd,
    kubernetes_secret.gitlab_pg,
    kubernetes_secret.gitlab_rails_storage,
    kubernetes_secret.gitlab_registry_storage,
    kubernetes_secret.gitlab_gcs_credentials,
  ]
}
